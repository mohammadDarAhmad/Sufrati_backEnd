// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sufrati.Data;

namespace Sufrati_backEnd.API.Migrations
{
    [DbContext(typeof(SufratiContext))]
    [Migration("20200822160948_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sufrati.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstanceIdValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedByID")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.GeneralLookupType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GeneralLookupNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralLookupNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GeneralLookupType");

                    b.HasData(
                        new
                        {
                            ID = 105000000000001L,
                            GeneralLookupNameAr = "نوع المستخدم",
                            GeneralLookupNameEn = "User Type"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.GeneralLookupValue", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralLookupTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValueAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GeneralLookupTypeID");

                    b.ToTable("GeneralLookupValue");

                    b.HasData(
                        new
                        {
                            ID = 106000000000001L,
                            CreatedByID = 101000000000001L,
                            Created_Date = new DateTime(2020, 8, 22, 19, 9, 47, 611, DateTimeKind.Local).AddTicks(1830),
                            GeneralLookupTypeID = 105000000000001L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 8, 22, 19, 9, 47, 611, DateTimeKind.Local).AddTicks(1888),
                            ValueAr = "آدمن رئيسي",
                            ValueEn = "admin"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.Groups", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            ID = 147000000000001L,
                            CreatedByID = 101000000000001L,
                            Created_Date = new DateTime(2020, 8, 22, 19, 9, 47, 612, DateTimeKind.Local).AddTicks(2307),
                            DescriptionAr = "هذه المجموعة للمسؤولين الرئيسين",
                            DescriptionEn = "this group for Admins",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 8, 22, 19, 9, 47, 612, DateTimeKind.Local).AddTicks(2334),
                            NameAr = "أدمن",
                            NameEn = "Admins"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.PasswordPolicy", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FirstLoginChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeCharacter")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNumeric")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeSpecialCharacter")
                        .HasColumnType("bit");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinLength")
                        .HasColumnType("int");

                    b.Property<int>("SessionAfterEnd")
                        .HasColumnType("int");

                    b.Property<int>("SuspendPasswordAfter")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("PasswordPolicy");

                    b.HasData(
                        new
                        {
                            ID = 148000000000001L,
                            CreatedByID = 101000000000001L,
                            Created_Date = new DateTime(2020, 8, 22, 19, 9, 47, 593, DateTimeKind.Local).AddTicks(7723),
                            FirstLoginChangePassword = true,
                            IPAddress = "127.0.0.1",
                            IncludeCharacter = true,
                            IncludeNumeric = true,
                            IncludeSpecialCharacter = true,
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 8, 22, 19, 9, 47, 596, DateTimeKind.Local).AddTicks(7186),
                            MinLength = 6,
                            SessionAfterEnd = 60,
                            SuspendPasswordAfter = 5,
                            TitleAr = "سياسة 1",
                            TitleEn = "Policy 1"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("PasswordPolicyID")
                        .HasColumnType("bigint");

                    b.Property<string>("UserImageOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImageSmall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserTypeID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginName")
                        .IsUnique();

                    b.HasIndex("PasswordPolicyID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 101000000000001L,
                            Address = "",
                            Created_Date = new DateTime(2020, 8, 22, 19, 9, 47, 607, DateTimeKind.Local).AddTicks(6541),
                            Email = "Ali@Gmail.com",
                            HomePhone = "",
                            IPAddress = "127.0.0.1",
                            IsActive = true,
                            LastModifiedDate = new DateTime(2020, 8, 22, 19, 9, 47, 607, DateTimeKind.Local).AddTicks(6598),
                            LoginName = "Ali",
                            Mobile = "",
                            NameAr = "علي",
                            NameEn = "Ali P",
                            Notes = "",
                            Password = "536re62er6r",
                            PasswordPolicyID = 148000000000001L,
                            UserImageOriginal = "localhost://",
                            UserImageSmall = "localhost://",
                            UserTypeID = 106000000000001L
                        },
                        new
                        {
                            ID = 101000000000002L,
                            Address = "",
                            CreatedByID = 1L,
                            Created_Date = new DateTime(2020, 8, 22, 19, 9, 47, 607, DateTimeKind.Local).AddTicks(6734),
                            Email = "Ahmad@Gmail.com",
                            HomePhone = "",
                            IPAddress = "127.0.0.1",
                            IsActive = true,
                            LastModifiedByID = 1L,
                            LastModifiedDate = new DateTime(2020, 8, 22, 19, 9, 47, 607, DateTimeKind.Local).AddTicks(6738),
                            LoginName = "Ahmad",
                            Mobile = "",
                            NameAr = "احمد",
                            NameEn = "Ahmad P",
                            Notes = "",
                            Password = "536re62er6r",
                            PasswordPolicyID = 148000000000001L,
                            UserImageOriginal = "localshost://",
                            UserImageSmall = "localhost://",
                            UserTypeID = 106000000000001L
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.UserGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.HasIndex("ID", "GroupID", "UserID")
                        .IsUnique();

                    b.ToTable("UserGroup");

                    b.HasData(
                        new
                        {
                            ID = 152000000000001L,
                            GroupID = 147000000000001L,
                            UserID = 101000000000001L
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.GeneralLookupValue", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.GeneralLookupType", "GeneralLookupType")
                        .WithMany("GeneralLookupValues")
                        .HasForeignKey("GeneralLookupTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.User", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.PasswordPolicy", "PasswordPolicy")
                        .WithMany("Users")
                        .HasForeignKey("PasswordPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sufrati.Domain.Entities.GeneralLookupValue", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.Groups", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sufrati.Domain.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
