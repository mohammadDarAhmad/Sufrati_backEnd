// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sufrati.Data;

namespace Sufrati_backEnd.API.Migrations
{
    [DbContext(typeof(SufratiContext))]
    [Migration("20201113212812_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sufrati.Domain.Entities.Attachment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Attachment");

                    b.HasData(
                        new
                        {
                            ID = 160000000000001L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 48, DateTimeKind.Local).AddTicks(2056),
                            FilePath = "00",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 48, DateTimeKind.Local).AddTicks(2094),
                            OriginalFileName = "File1",
                            PhysicalFileName = "Filefile"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.AttachmentType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentDescAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AttachmentDescEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxSize")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ID");

                    b.ToTable("AttachmentType");

                    b.HasData(
                        new
                        {
                            ID = 199000000000001L,
                            AttachmentDescAr = "عربي",
                            AttachmentDescEn = "eng",
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 49, DateTimeKind.Local).AddTicks(1135),
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 49, DateTimeKind.Local).AddTicks(1208),
                            MaxSize = 10m
                        },
                        new
                        {
                            ID = 199000000000002L,
                            AttachmentDescAr = "عربي",
                            AttachmentDescEn = "eng",
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 49, DateTimeKind.Local).AddTicks(1290),
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 49, DateTimeKind.Local).AddTicks(1297),
                            MaxSize = 10m
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.AttachmentTypeFileType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttachmentTypeID")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentTypeID");

                    b.HasIndex("FileTypeID");

                    b.ToTable("AttachmentTypeFileType");

                    b.HasData(
                        new
                        {
                            ID = 110100000000001L,
                            AttachmentTypeID = 199000000000001L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 56, DateTimeKind.Local).AddTicks(9396),
                            FileTypeID = 198000000000001L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 56, DateTimeKind.Local).AddTicks(9452)
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstanceIdValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedByID")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("BankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BankID");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.BankAccount", b =>
                {
                    b.Property<int>("BankAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BankAccountID");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.FileType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("FileTypeDescAr")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileTypeDescEn")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FileExtension")
                        .IsUnique()
                        .HasName("UX_FileType");

                    b.ToTable("FileType");

                    b.HasData(
                        new
                        {
                            ID = 198000000000001L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3282),
                            FileExtension = ".jpeg",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3361)
                        },
                        new
                        {
                            ID = 198000000000002L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3414),
                            FileExtension = ".pdf",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3427)
                        },
                        new
                        {
                            ID = 198000000000003L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3439),
                            FileExtension = ".rar",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3451)
                        },
                        new
                        {
                            ID = 198000000000004L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3463),
                            FileExtension = ".xls",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3475)
                        },
                        new
                        {
                            ID = 198000000000005L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3488),
                            FileExtension = ".xlsx",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3499)
                        },
                        new
                        {
                            ID = 198000000000006L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3511),
                            FileExtension = ".docx",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3523)
                        },
                        new
                        {
                            ID = 198000000000007L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3531),
                            FileExtension = ".doc",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3536)
                        },
                        new
                        {
                            ID = 198000000000008L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3543),
                            FileExtension = ".png",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 52, DateTimeKind.Local).AddTicks(3555)
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.GeneralLookupType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GeneralLookupNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralLookupNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GeneralLookupType");

                    b.HasData(
                        new
                        {
                            ID = 105000000000001L,
                            GeneralLookupNameAr = "نوع المستخدم",
                            GeneralLookupNameEn = "User Type"
                        },
                        new
                        {
                            ID = 105000000000002L,
                            GeneralLookupNameAr = "تنصصيف حسب الاصناف",
                            GeneralLookupNameEn = "Classification by category"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.GeneralLookupValue", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralLookupTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValueAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GeneralLookupTypeID");

                    b.ToTable("GeneralLookupValue");

                    b.HasData(
                        new
                        {
                            ID = 106000000000001L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9439),
                            GeneralLookupTypeID = 105000000000001L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9502),
                            ValueAr = "آدمن رئيسي",
                            ValueEn = "admin"
                        },
                        new
                        {
                            ID = 107000000000002L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9563),
                            GeneralLookupTypeID = 105000000000002L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9567),
                            ValueAr = "رئيسي",
                            ValueEn = "Main"
                        },
                        new
                        {
                            ID = 107000000000003L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9571),
                            GeneralLookupTypeID = 105000000000002L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9574),
                            ValueAr = "سلطة",
                            ValueEn = "Salad"
                        },
                        new
                        {
                            ID = 107000000000004L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9577),
                            GeneralLookupTypeID = 105000000000002L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9580),
                            ValueAr = "حلوى",
                            ValueEn = "Sweet"
                        },
                        new
                        {
                            ID = 107000000000005L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9584),
                            GeneralLookupTypeID = 105000000000002L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9587),
                            ValueAr = "مشروب",
                            ValueEn = "Drink"
                        },
                        new
                        {
                            ID = 107000000000006L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9591),
                            GeneralLookupTypeID = 105000000000002L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9594),
                            ValueAr = "خفيف",
                            ValueEn = "Light"
                        },
                        new
                        {
                            ID = 107000000000007L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9597),
                            GeneralLookupTypeID = 105000000000002L,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 33, DateTimeKind.Local).AddTicks(9600),
                            ValueAr = "ساندويش",
                            ValueEn = "Sandwich"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.Groups", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            ID = 147000000000001L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 35, DateTimeKind.Local).AddTicks(6373),
                            DescriptionAr = "هذه المجموعة للمسؤولين الرئيسين",
                            DescriptionEn = "this group for Admins",
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 35, DateTimeKind.Local).AddTicks(6431),
                            NameAr = "أدمن",
                            NameEn = "Admins"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.MyNLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EntityID")
                        .HasColumnType("bigint");

                    b.Property<string>("ExceptionMessages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LogTypeID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessagesCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PasswordChangedByID")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("LogTypeID");

                    b.HasIndex("PasswordChangedByID");

                    b.HasIndex("UserID");

                    b.ToTable("MyNLog");
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.PasswordPolicy", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FirstLoginChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeCharacter")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeNumeric")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeSpecialCharacter")
                        .HasColumnType("bit");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinLength")
                        .HasColumnType("int");

                    b.Property<int>("SessionAfterEnd")
                        .HasColumnType("int");

                    b.Property<int>("SuspendPasswordAfter")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("PasswordPolicy");

                    b.HasData(
                        new
                        {
                            ID = 148000000000001L,
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 9, DateTimeKind.Local).AddTicks(6999),
                            FirstLoginChangePassword = true,
                            IPAddress = "127.0.0.1",
                            IncludeCharacter = true,
                            IncludeNumeric = true,
                            IncludeSpecialCharacter = true,
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 13, DateTimeKind.Local).AddTicks(2401),
                            MinLength = 6,
                            SessionAfterEnd = 60,
                            SuspendPasswordAfter = 5,
                            TitleAr = "سياسة 1",
                            TitleEn = "Policy 1"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.Recipe", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassificationClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreparationMethod")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<long>("PreparationTimeMinutes")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleRecipeAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleRecipeEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Video")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("classificationInternational")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.SystemConstant", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableSSL")
                        .HasColumnType("bit");

                    b.Property<decimal>("FinesAmountPerEachDayDelayed")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<string>("FormEmailAddress")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxCompensationAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("NotifyBanksForInvoiceAfter")
                        .HasColumnType("int");

                    b.Property<string>("OutgoingSMTPServer")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("QualitativeCriteriaMaxScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("SMTPPortNumber")
                        .HasColumnType("int");

                    b.Property<bool>("SMTPServerRequiresAuthentication")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalQuantitativeCriteriaMaxScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Weekend")
                        .IsRequired()
                        .HasColumnType("char(7)");

                    b.HasKey("ID");

                    b.ToTable("SystemConstant");

                    b.HasData(
                        new
                        {
                            ID = 107000000000001L,
                            AttachmentPath = "C:\\PCPSAttachement",
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 47, DateTimeKind.Local).AddTicks(5765),
                            EnableSSL = false,
                            FinesAmountPerEachDayDelayed = 0.0001m,
                            IPAddress = "127.0.0.1",
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 47, DateTimeKind.Local).AddTicks(5832),
                            MaxCompensationAmount = 20000m,
                            NotifyBanksForInvoiceAfter = 90,
                            QualitativeCriteriaMaxScore = 0m,
                            SMTPPortNumber = 0,
                            SMTPServerRequiresAuthentication = false,
                            TotalQuantitativeCriteriaMaxScore = 70m,
                            Weekend = "0000110"
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<long?>("AttachmentID")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("LastModifiedByID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<long>("NumberOfWrongLogin")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("PasswordActive")
                        .HasColumnType("bit");

                    b.Property<long>("PasswordPolicyID")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserImageID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserTypeID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AttachmentID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginName")
                        .IsUnique();

                    b.HasIndex("PasswordPolicyID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 101000000000001L,
                            Address = "Ramallah",
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 29, DateTimeKind.Local).AddTicks(542),
                            Email = "Admin@Gmail.com",
                            HomePhone = "022965472",
                            IPAddress = "127.0.0.1",
                            IsActive = true,
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 29, DateTimeKind.Local).AddTicks(623),
                            LoginName = "Admin",
                            Mobile = "0599999999",
                            NameAr = "مسؤول النظام",
                            NameEn = "Admin",
                            Notes = "Admin User of the system",
                            NumberOfWrongLogin = 0L,
                            Password = "YgMhEvQnlflEL8BH8bJdIw==:::9CwV4SYQmQhYNpHuA9RL6pKNWlocxWw428/dRClVpjE=",
                            PasswordActive = false,
                            PasswordPolicyID = 148000000000001L,
                            UserTypeID = 106000000000001L
                        },
                        new
                        {
                            ID = 101000000000002L,
                            Address = "Ramallah",
                            CreatedByID = 101000000000001L,
                            CreatedDate = new DateTime(2020, 11, 13, 23, 28, 12, 29, DateTimeKind.Local).AddTicks(883),
                            Email = "Ala@Gmail.com",
                            HomePhone = "022965472",
                            IPAddress = "127.0.0.1",
                            IsActive = true,
                            LastModifiedByID = 101000000000001L,
                            LastModifiedDate = new DateTime(2020, 11, 13, 23, 28, 12, 29, DateTimeKind.Local).AddTicks(889),
                            LoginName = "Ala",
                            Mobile = "0599999999",
                            NameAr = "علاء",
                            NameEn = "Ala",
                            Notes = "Admin User of the system",
                            NumberOfWrongLogin = 0L,
                            Password = "YgMhEvQnlflEL8BH8bJdIw==:::9CwV4SYQmQhYNpHuA9RL6pKNWlocxWw428/dRClVpjE=",
                            PasswordActive = false,
                            PasswordPolicyID = 148000000000001L,
                            UserTypeID = 106000000000001L
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.UserGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.HasIndex("ID", "GroupID", "UserID")
                        .IsUnique();

                    b.ToTable("UserGroup");

                    b.HasData(
                        new
                        {
                            ID = 152000000000001L,
                            GroupID = 147000000000001L,
                            UserID = 101000000000001L
                        });
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.AttachmentTypeFileType", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.AttachmentType", "AttachmentType")
                        .WithMany("FileTypes")
                        .HasForeignKey("AttachmentTypeID")
                        .HasConstraintName("FK_AttachmentType_AttachmentTypeFileType_AttachmentTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sufrati.Domain.Entities.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeID")
                        .HasConstraintName("FK_FileType_AttachmentTypeFileType_FileTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.GeneralLookupValue", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.GeneralLookupType", "GeneralLookupType")
                        .WithMany("GeneralLookupValues")
                        .HasForeignKey("GeneralLookupTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.MyNLog", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.GeneralLookupValue", "LogType")
                        .WithMany()
                        .HasForeignKey("LogTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sufrati.Domain.Entities.User", "PasswordChangedByUser")
                        .WithMany()
                        .HasForeignKey("PasswordChangedByID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sufrati.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.User", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentID");

                    b.HasOne("Sufrati.Domain.Entities.PasswordPolicy", "PasswordPolicy")
                        .WithMany("Users")
                        .HasForeignKey("PasswordPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sufrati.Domain.Entities.GeneralLookupValue", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sufrati.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Sufrati.Domain.Entities.Groups", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sufrati.Domain.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
